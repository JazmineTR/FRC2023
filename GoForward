// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

//import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.Spark;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;

/**
 * The VM is configured to automatically run this class, and to call the functions corresponding to
 * each mode, as described in the TimedRobot documentation. If you change the name of this class or
 * the package after creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
  private Command m_autonomousCommand;
  Spark m_frontRight = new Spark(1); // 0 is the RIO PWM port this is connected to
  Spark m_rearRight = new Spark(2);
    MotorControllerGroup m_right = new MotorControllerGroup(m_frontRight, m_rearRight);

    Spark m_frontLeft = new Spark(3);
    Spark m_rearLeft = new Spark(4);
    MotorControllerGroup m_left = new MotorControllerGroup(m_frontRight, m_rearRight);


DifferentialDrive m_drive = new DifferentialDrive(m_left, m_right);
Joystick logitechJoystick = new Joystick(0);
  private RobotContainer m_robotContainer;

  /**
   * This function is run when the robot is first started up and should be used for any
   * initialization code.
   */
  @Override
  public void robotInit() {
    // Instantiate our RobotContainer.  This will perform all our button bindings, and put our
    // autonomous chooser on the dashboard.
    m_left.setInverted(true);

  }

  /**
   * This function is called every 20 ms, no matter the mode. Use this for items like diagnostics
   * that you want ran during disabled, autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before LiveWindow and
   * SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {
    // Runs the Scheduler.  This is responsible for polling buttons, adding newly-scheduled
    // commands, running already-scheduled commands, removing finished or interrupted commands,
    // and running subsystem periodic() methods.  This must be called from the robot's periodic
    // block in order for anything in the Command-based framework to work.
    CommandScheduler.getInstance().run();
  }

  /** This function is called once each time the robot enters Disabled mode. */
  @Override
  public void disabledInit() {}

  @Override
  public void disabledPeriodic() {}

  /** This autonomous runs the autonomous command selected by your {@link RobotContainer} class. */
  @Override
  public void autonomousInit() {
    m_autonomousCommand = m_robotContainer.getAutonomousCommand();

    // schedule the autonomous command (example)
    if (m_autonomousCommand != null) {
      m_autonomousCommand.schedule();
    }
  }

  /** This function is called periodically during autonomous. */
  @Override
  public void autonomousPeriodic() {

  }

  @Override
  public void teleopInit() {
    // This makes sure that the autonomous stops running when
    // teleop starts running. If you want the autonomous to
    // continue until interrupted by another command, remove
    // this line or comment it out.
    if (m_autonomousCommand != null) {
      m_autonomousCommand.cancel();
    }
  }

  /** This function is called periodically during operator control. */
  @Override
  public void teleopPeriodic() {
 double speed = -logitechJoystick.getRawAxis(1) * 0.6;
 double turn = logitechJoystick.getRawAxis(0)*0.3;
 double left = speed + turn;
 double right = speed - turn;
  m_frontLeft.set(left);
  m_rearLeft.set(left);
  m_frontRight.set(right);
  m_rearRight.set(right);
  }
  @Override
  public void testInit() {
    // Cancels all running commands at the start of test mode.
    CommandScheduler.getInstance().cancelAll();
  }

  /** This function is called periodically during test mode. */
  @Override
  public void testPeriodic() {

  }

  /** This function is called once when the robot is first started up. */
  @Override
  public void simulationInit() {

  }


  /** This function is called periodically whilst in simulation. */
  @Override
  public void simulationPeriodic() {

  }

  public Command getM_autonomousCommand() {
    return m_autonomousCommand;
  }

  public void setM_autonomousCommand(Command m_autonomousCommand) {
    this.m_autonomousCommand = m_autonomousCommand;
  }

  public Spark getM_frontRight() {
    return m_frontRight;
  }

  public void setM_frontRight(Spark m_frontRight) {
    this.m_frontRight = m_frontRight;
  }

  public Spark getM_rearRight() {
    return m_rearRight;
  }

  public void setM_rearRight(Spark m_rearRight) {
    this.m_rearRight = m_rearRight;
  }

  public MotorControllerGroup getM_right() {
    return m_right;
  }

  public void setM_right(MotorControllerGroup m_right) {
    this.m_right = m_right;
  }

  public Spark getM_frontLeft() {
    return m_frontLeft;
  }

  public void setM_frontLeft(Spark m_frontLeft) {
    this.m_frontLeft = m_frontLeft;
  }

  public Spark getM_rearLeft() {
    return m_rearLeft;
  }

  public void setM_rearLeft(Spark m_rearLeft) {
    this.m_rearLeft = m_rearLeft;
  }

  public MotorControllerGroup getM_left() {
    return m_left;
  }

  public void setM_left(MotorControllerGroup m_left) {
    this.m_left = m_left;
  }

  public DifferentialDrive getM_drive() {
    return m_drive;
  }

  public void setM_drive(DifferentialDrive m_drive) {
    this.m_drive = m_drive;
  }

  public Joystick getLogitechJoystick() {
    return logitechJoystick;
  }

  public void setLogitechJoystick(Joystick logitechJoystick) {
    this.logitechJoystick = logitechJoystick;
  }

  public RobotContainer getM_robotContainer() {
    return m_robotContainer;
  }

  public void setM_robotContainer(RobotContainer m_robotContainer) {
    this.m_robotContainer = m_robotContainer;
  }
}
